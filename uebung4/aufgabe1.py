import math
import hashlib
from sympy import isprime

# ANSI escape codes for colors
RED = "\033[91m"
GREEN = "\033[92m"
RESET = "\033[0m"

# Define the security standards
security_standards = {
    (3072, 256): "SHA-256",
    (15360, 512): "SHA-512"
}
numbers = [1, 2, 3, 4, 5, 6]
ps = []
omegas = []
gs = []

# input data
ps.append(3721096203552968961243871056743821021905791669487960826460976838063014864760238750268518601627020708606133737083971105380000458160751453626402820601381377021119538422172628019650397373310979431355549017294092105141525408255207215178022643315881090813536756512353576853282428237478090987145696496270252198203389799571233130896909085301430142023708119865842230874933618381393281860707612924040199211104682383127331506001353469613616755164572587106859487338835495929746460819023280785944505560347404229703492386566923247962307712410011990561224761542075859976111485401593257156767782671278189710291384001599787499961187959936147279466406618622852906114672646695146351576267804334327573456943130906898133827532129514008055599207902380699267283606098927903521021698122775200966044903950760886939886990902626532062393033287809386410121087188103364900650278217101670963635421025893081574048286214790697867525221842909629809864281981)
omegas.append(97747877550555861944711387785240437382727046436312054763665448273478314828270)
gs.append(1062139993635674998488911628609325516479326234069451770643276085483759240478909170730303951600581674171419978754715396925115264814534427454739866886799182883044756845986139246432150512447754876285724899521097642486633592823788215829966153612024462448210516883530275721092020450451417780902900737262190342455079323303528899938521310833213802590308195634950171848197196707788649434234417355137127192725051283408722610386757058573788875137463641931467789297361982299402626546633312555592643505494073140238532525421597699760109990650336617044305248263369299151448815326017366550460923952032945827542899526366110460911206369998692728214095788460570436543684520992834187717106651336845750355792772572063960893116334306119891387725880413406312544564183366086572544172094547758821568939876450669347082391323601158755551554469590685305588286055105422042645027334149711087470028711739957579490686726585418504183326641333372100506267517)


ps.append(4647634416908361150228562649622377345999207346833469724262414499193725145823103968575866180225181673729272347242854083437436431064566095067516108206896686271466531364934510124898841789406715529214113088344651181211222149031472651407689052020688403135322727449685948930892695996891556917389848692383856507007482764107246690431657290912990912679795700933440263918203609054985283213207508969617025295452535130930286743820902801580155692505307043856981629637640353049291532512574574221524235362439782848557246729715939112960536797225041351242453996548130851049416370088429184716356307947087115142045460378436938711365708011075434958842459144493574353287477063521207018744607920548624678229587930614168391754449817513578493402942315654738942547147083448311674749567988455162446558795299916910573334318575021091957089039143882191443937056105083503568756370432942079414715793561734460242306828890584649961011889579658647125395492719)
omegas.append(102537483796477551225159092003000419843155738353152856339523692657462210741)
gs.append(1962968469231113369006773933149780870696544426655656905634902349060328801773039501272851049182614598939955272528060668443768238610825643297985759952041825513721266931032594001902579518247472831634812447062769767306619616048591038858477129048511976376636487166493426108309172027002246135265919272864556470427222123915385199032353065330348554746539056716217987793211649714462517977605388029271534657311271244833312162537809651844025446067714976322442075157916689816403772845012456221205211569017328352649039642195969644639328603869590439600142782840323666317556481515096011223366780512459714736491699430014201977036146265920198391828764674303836115772579864863137384622959583323963962583183006873157831211213374903784213533651139776690023901335183099493230385548237597753951184084897659261298738548369848150588429459807432274434666660257595122456719376849609604662095225305632257804478751239038783616554295250361811641690642835)


ps.append(4039069448052096661706981288832736183967969534449578084124456864085275227459320758056965061123253371714726062699484598439959134760710883483488111221825803448813047753305850222791473511706567050497074655701949785057186583567289375884926164443355007414710298337709159480440301690892209296813813938082398445701097572907978807248226037274148760639705748965383144401557459207846313282551879280568716795753729488904120097319545782266375421625193180946490505130395065522912911028000512389159095158280100878834783511527764624047899213216833501407136254598381560844644242690039899974134147595127859502207800171253836776236002226149139576466351674731801795905268417539472608346222360943084673401955986247172300199317981495601274932550297956457408384707451484884669761827756499050114602027871266509998972468451525449644902600266364722011034448346807711450587304139295654979833314509365277556250014487398879446928993488054170334517234899)
omegas.append(71593782556644419357747901144374488715085185090530839696556775130545893191101)
gs.append(3220970317731097529673773006081036325900221329199102324190993024380970175826247927585234507746481826996001011099779286099354101686433030295600390111247821621869853800359199385308467541172202605430175163663341750145316721916802180348378118416699267365815616372689590291926846634827714317933662623264982635386335190033822262285332772561972868607029236829869635895324994769910404442820349997175887059075642194757235015333481153049830925246286657006809459031857303793870374515424084848625876982763058054250859961344730356906665824546089369725273579633157088616603539795871118403297845475012698153925497270505344244138763840184191621202199123516261427049032620969792002660954480228409148046525728368338997329312732934534328016267020504218441105115259707628511331346336186616747108507436349140209365610105580098018604801883073892315155065994618740112023649790557194175255189937099367684832661859453591953846940207483880149840081341)

ps.append(5802469382331237599336845054777591035788823946978025704681669843841100672841834253411534844355088536012019389030911232881700714074365897741197877574032984502946180778294207306525991245119452123930210915920418645271601433609359132498649115644154111978647689771321414770128597621036519682013590271504004358252532943953202102885874268281465996518397351724716509347652459729832946298560900589129350962560530434958654572549995313972910621704376835400728912532389523546904777728748890908454452304808898728130642112053956028553531641778048983615792919652177641034473269042485644339182352969208356266684606770081675703704853828706844299211750612984547777912841732601056425896779094575754846565575508821519894673291567327910340036744600567231014810475090394822280581024369380453871777785710811572146794171811560852462102994348318483569313817473285957364715788554481175245109132258431387956231640195469822351665756870010894638284892871)
omegas.append(94325566884029592000119198779859142430143560194378529818433823071593360973993)
gs.append(1074371068158266537917447952644991741749862629872851102384078065889252397727979885359829670258766396563218321064476059775517151607142102087855208120191447285987200137264315489873153511116364699867410448307061526084517428078268969662546834042203903582770960574385179960613276368978997525171193832461648967619450024097099614022479837621613648998623294151338424847476456727961500297032326160418144964671344977199941348757759515051906344909911639155470667596508142573109798302648452620293356120664365234224146809077878894210031970988207834824800927625164399879460475971381178634160499536084064876690933051217568962220838968365556193206128287294549818129660485987223919054144179132653952635921553740282336073463794389830157950433903718922084748722122329509306985449907039877100441015890000915231575755193882913428103377945410737646985683600391395822354579736333396102850452587712817556297947804288762784080834331888393231452139523)

ps.append(3546081858483010388642768883965982235539110027467414983752993651798349563723679947320990634976914494767422539824492650796761502512224576979049725484687521581911708968881927446529351823847387775142326773845842970546056956345990847149153212733767103830949374442987213952514934850646863419111319007327230329524012293143061840279463977489968060638352926541425482187639355582655722784633430533726512445352482463269530300991555599355202651286111989741140688581150932080826200926670805262553774451227749998970583737709211803730815167006119516308726959493052589825544474302484684949060127197393540143858388203783948338218342833483472058918054042634916648450184541972018120144649370395347329923264730815298889435809230167454922568163954389636493659061541233020454291768167475691809233119610606061740548154924735910297973476501678669849094437030638149922211618357434424050903540878398068441775175716024165990405997051585787872036280297)
omegas.append(69885195551548495551299935848827279454235793706020152844135314309931449318769)
gs.append(3313903350939543318280392263767440037255834045413069161318357641150276298985365151082688749625979226903594403683799793262930810740289055777786919873802520836021984565190290185818281158822044832749467898503213256594355196112896142149847228124479444194914745016562433315483263701575946228143218700201133036541624109134224624988231117093831879046819013782324863413827955054386973531402654050569782682099464633710818263946067943041996376754368393908408545923117784686353685744100246398459271799263680689359316919432163612654849843097521916138920363517050444191107102030059016415577635067218597429550752000063748559515441131420653154850085049627910830141731088061949067010871466120772584301059631926119033870070354307487905004677242493105109426564251707236939693219578273503808070438173608978129074817339526866281246021121219092160620228323431137223391435979400865993719901230062928508162298045454415833171343119879854338861199986)

ps.append(3290713995025442768257795098772126795156965578732102092870495278944743433904263467523241131112000879000283194218538944505675725352000652468683055901266776593798210662067512782284808844106159350149684024578321198614842880888341605477897732012375015510919115133075992153252475211379003116498482623255914686756282688148508234182293384848572881783238745101304639676459346746810782024531155479065415926510417463022876457412707433143422454947525544786808874793267063134340786915654208062384240835165019297602588849245471373319548243151870615252434999918010249030280298542412631013316053843350438245458929808342374120852118276270476988212490147211232137863073765632506236064667252824561198880467167897378250793169228222799255874518422572075238452452179492184670559248678605438270827780186087665589067065700404255239625782495728041691458433319881998314716540988862919646949411488316986202693353247945666902052675606959983709003530237)
omegas.append(77755708629053786152519442830353815680588573545506136518459894343999434907791)
gs.append(1397727846381574965471382771737848930421758108377975942960241809763827763541502650704060545764157020501305416525771140582830409127356531067149798137219015528820692226662097526276053856736100766641356761518888102157886724539078955199718735960388364531966804022589602459019352976752625123861868083418325622688474442429089419724205314875307898493252340269414536877313829936413139930891227610768296998046037674387207610786587856117188899188440455151846642212572214342006337563228439502258495781168073531230962307084845273795542514080052153308023845385094024102549100868105408385671718907066394517320761813765555362324537087304796962655204875027538086438900628788476224334328093714347232626797847493617487927060794628113071276086927561531757903113342639679698137094793591776559223949845428661664729109052072190143024624103942041148136297146449046442003967785951874783274508176026558609472399873078124338475876591875417400611820185)

# Function to get truncated representation of large numbers
def truncated_repr(number, start_length=3, end_length=3):
    number_str = str(number)
    return f"{number_str[:start_length]}...{number_str[-end_length:]}"

# Function to check if a number is of a certain bit length
def is_bit_length(number, bit_length):
    return number.bit_length() == bit_length

# Function to display a check result with color
def display_check(result, positive_msg, negative_msg):
    return f"{GREEN}{positive_msg}{RESET}" if result else f"{RED}{negative_msg}{RESET}"

# Function to validate DSA parameters
def validate_parameters(ps, omegas, gs):
    for i, (p, omega, g) in enumerate(zip(ps, omegas, gs)):
        print(f"Set {i+1}:")
        L = p.bit_length()
        N = omega.bit_length()

        # Check if p and omega are prime
        is_p_prime = isprime(p)
        is_omega_prime = isprime(omega)

        # Check the relationship between p and omega
        valid_p_omega_relationship = (p-1) % omega == 0

        # Check if g^omega ≡ 1 (mod p)
        valid_g = pow(g, omega, p) == 1

        # Displaying bit lengths, primality, and truncated values
        print(f"  p = {truncated_repr(p)}")
        print(f"  omega = {truncated_repr(omega)}")
        print(f"  g = {truncated_repr(g)}")
        print(f"  p bit-length: {display_check(is_bit_length(p, L), L, L)} (Expected: 3072 or 15360)")
        print(f"  omega bit-length: {display_check(is_bit_length(omega, N), N, N)} (Expected: 256 or 512)")
        print(f"  Is p prime: {display_check(is_p_prime, 'Yes', 'No')}")
        print(f"  Is omega prime: {display_check(is_omega_prime, 'Yes', 'No')}")
        print(f"  g^omega ≡ 1 (mod p): {display_check(valid_g, 'Yes', 'No')}")

        # Validate against security standards
        if (L, N) not in security_standards:
            print(RED + f"  Error: (L, N) = ({L}, {N}) does not match security standards." + RESET)
        elif not is_p_prime:
            print(RED + f"  Error: p is not prime." + RESET)
        elif not is_omega_prime:
            print(RED + f"  Error: Omega is not prime." + RESET)
        elif not valid_p_omega_relationship:
            print(RED + f"  Error: p-1 is not divisible by omega." + RESET)
        elif not valid_g:
            print(RED + f"  Error: g^omega ≡ 1 (mod p) condition failed." + RESET)
        else:
            print(GREEN + f"  Parameters meet the {security_standards[(L, N)]} security standard.\n" + RESET)

# Run the validation
validate_parameters(ps, omegas, gs)