import si
import time
import random
# 7.) DecryptClassic and DecryptCRS
p = 1913
q = 1297
d = 1723265

def DecryptSlow(p, q, d, c):

    n = p * q
    m = c ** d % n

    return m



# alternatively use pow for square-and-multiply
def DecryptClassic(p, q, d, c):

    n = p * q

    # square-and-multiply
    d_bin = bin(d)[2:]
    multipliers = [c % n]
    for i in range(1, len(d_bin)):
        multipliers.append(multipliers[i-1]**2 % n)
    multiplied = 1
    for i,j in enumerate(list(d_bin)[::-1]):
        if j == "1":
            multiplied *= multipliers[i]
    c_pow_d = multiplied % n


    m = c_pow_d % n

    return m



# 8.)
def DecryptClassic_pow(p, q, d, c):
    
    n = p * q
    m = pow(c,d,n)

    return m

p = 31675727281325656378650275815036870073075503506093135402668988284047582230234258467605688521782344760159754141735662356011193420947311608435850566404918185999411166623943087854416995350649389538088689024701566496830518110466657545746240238894635742584612647648574741137665161365376438908175977601791246452515120052838341341889194252726343466888112420237628121739378062616082491727663627584826886897737953481833310205201122493306313841163854788229633693940307629142860205555903044050314630648838699538450602895188464221389842416066181843607277208716588663905995818191725899117879649482087489834959698059351566304221403

q = 28497686265003976932967492827814876126053526688089768434297027258547973656844021829433405129475698422210220679094220475615971021204575349605926645367638636763975543206043787150254881954824767093421635052255226162149827997054490835247762217121750428225345526082729129906702405444805143280151831892975282527272572414742821655184527236578920183260234854291993307443038415727197987382331851545279711338164589459823028219258734760681061056166427588313906571846826854891068445972876221166159875986207233297913681929018757143183334620197062287769843055074118580268298366704569946824088015465856635799714620572321038322893399

d = 351228556786482002318700635024635703212223208909347575617920551457610669781003404760573947887550254232124260803042831235326957091414911045016368255383726624341422135793499460414438436809847159199409174853261665627234722581880829556631694370960259648050436590185347940334345522192218651982353944047736865257919687790511965675559866683063944776206751949751341337652713367783771744895595392110764320436292966382619858594978378206414749358332100069019947938141901908809869463396714949027540157104195157335252825830675015480698819301476207123782580932687614525280195309166074700117924177359235153684941001270764101453441205817065225922395831709243489736848181380222278930714033650448939127540049540325467423795738224357664960624552269065505783940092227080804842824914407132586052262092373796561590304276044324592340466536395523541347134959140238352755592611659452094181199909692055193099249055834934847931264788252820771634832243986235683404751198123880285690844377944689173118286256793451163068652137312496448453152069027394579251137797232515017304638423284612213287374652797502842811767018200073815066983295143226674866391024566889460669384273814189499125270289814368289885792408382087873483624089675780977317504040065644196628912227473



d_p = d % (p-1)
d_q = d % (q-1)

_, _, y = si.extended_gcd(p, q)



def DecryptCRS(p, q, d, c):
    m_p = pow(c, d_p, p)
    m_q = pow(c, d_q, q)

    h = ((m_p - m_q)*y) % p
    m = m_q + q*h % (p*q)

    return m

print("-----------------------------------------------------------------------------------")
# Test Beispiel 8

# Generate 10 random ciphers
n = p * q
random_ciphers = [random.randint(0, n-1) for _ in range(10)]

# Test DecryptClassic_pow with 10 random ciphers and calculate average time
total_time_classic_pow = 0
for cipher in random_ciphers:
    start_time = time.time()
    DecryptClassic_pow(p, q, d, cipher)
    end_time = time.time()
    total_time_classic_pow += end_time - start_time
average_time_classic_pow = total_time_classic_pow / 10
print(f"Average time taken for DecryptClassic_pow: {average_time_classic_pow:.20f} seconds")
print('-' * 60)

# Test DecryptCRS with 10 random ciphers and calculate average time
total_time_crs = 0
for cipher in random_ciphers:
    start_time = time.time()
    DecryptCRS(p, q, d, cipher)
    end_time = time.time()
    total_time_crs += end_time - start_time
average_time_crs = total_time_crs / 10

print(f"Average time taken for DecryptCRS: {average_time_crs:.20f} seconds")
print('-' * 60)
